/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * panelPrueba.java
 *
 * Created on 05/08/2010, 22:57:40
 */

package visualizador;

import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Pablazo
 */
public class PanelPrueba extends javax.swing.JPanel {
    private ArrayList <Punto> puntos;
    private ArrayList <ArrayList <int[]>> resultados;
    private float[] temperatura;
    int pos = -1;
    int puntoSeleccionado = -1;

    /** Creates new form panelPrueba */
    public PanelPrueba() {
        temperatura = new float[2];
        puntos = new ArrayList<Punto>();
        resultados = new ArrayList <ArrayList <int[]>>();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 1000));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        for (int i = 0; i < puntos.size(); i++) {

            Shape s = devolverOvalo(puntos.get(i), 10);
            if (s.contains(evt.getPoint())) {
                this.setCursor(new Cursor(Cursor.HAND_CURSOR));
                puntoSeleccionado = i;
                repaint();
            }
//            else
//                puntoSeleccionado = -1;
        }
    }//GEN-LAST:event_formMouseMoved

    public void paint(Graphics g){
        super.paint(g);
        for (int i=0; i <puntos.size(); i++){
            g.drawOval((int)(puntos.get(i).getX() / 2) - 2, ((int)-puntos.get(i).getY() / 2) - 2, 5, 5);
            if (puntoSeleccionado == i){
                //g.drawString("("+(int)puntos.get(i).getX() / 2 +","+(int)(-puntos.get(i).getY() / 2 )+")", (int)puntos.get(i).getX() / 2 , (int)(-puntos.get(i).getY() / 2 ) - 10);
                g.drawString(puntos.get(i).getVReal(), (int)puntos.get(i).getX() / 2 , (int)(-puntos.get(i).getY() / 2 ) - 10);
            }
            g.drawString(String.valueOf(i), (int)puntos.get(i).getX() / 2 , (int)(-puntos.get(i).getY() / 2 ) + 15);
        }
        
        if ((pos != -1) && (pos < resultados.size())){
            for (int i = 0; i < resultados.get(pos).size(); i++){
                g.drawLine((int)puntos.get(resultados.get(pos).get(i)[0]).getX()/2,
                           -(int)puntos.get(resultados.get(pos).get(i)[0]).getY()/2,
                           (int)puntos.get(resultados.get(pos).get(i)[1]).getX()/2,
                           -(int)puntos.get(resultados.get(pos).get(i)[1]).getY()/2);
            }
        }

    }
    public void addPunto(Punto p) {
        puntos.add(p);
    }

    public void addResultado(ArrayList<int[]> r){
        pos = 0;
        resultados.add(r);
    }

    public void addInicial(ArrayList<int[]> r){
        resultados.add(r);
    }

    public void addTemperatura(Float t, int i) {
        temperatura[0] = t;
        temperatura[1] = i;
    }

    public void forwardPos(){
        if (pos < resultados.size() - 1){
            pos++;
        }
        repaint();
    }

    public void backwardPos(){
        if (pos > 0){
            pos--;
        }
        repaint();
    }

    public void resetResultados(){
        resultados.clear();
    }

    protected Shape devolverOvalo(Punto p, int ancho) {

        return new Ellipse2D.Double((p.getX() - ancho / 2)/2, (-p.getY() - ancho / 2)/2, ancho, ancho);
    }

    public void setPos(String text) {
        pos = Integer.parseInt(text);
        if (pos > resultados.size())
            JOptionPane.showMessageDialog(null, "Posición incorrecta", "Error",JOptionPane.INFORMATION_MESSAGE);
        else
            repaint();
    }

    public int getPos(){
        return pos;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
