/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelNorte.java
 *
 * Created on 30/06/2010, 22:37:16
 */
package visualizador;

import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Properties;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.MouseInputListener;

/**
 *
 * @author Pablazo
 */
public class PanelNorte extends javax.swing.JPanel implements ChangeListener, WindowListener {

    public final int RANDOM = 0;
    public final int GREEDY = 1;
    public final int MINAREA = 2;
    public final int POLSIMPLE = 1;
    public final int POLCONVEXO = 2;
    int tr = 0;
    int pt = 0;
    ButtonGroup drawGroup, tGroup;
    int drawBoton = 0;
    char llamarCaja = ' ';
    JColorChooser tcc;
    private int p = 0;//polígonización seleccionada 0<=p<=6
    String directorio;
    /*private static Properties properties = null;
    private static String propertyFileName = "visLotes/Directorio.txt";*/
    private JFrame jf = null;

    /** Creates new form PanelNorte */
    public PanelNorte() {
        initComponents();
        drawGroup = new ButtonGroup();
        drawGroup.add(jtbPunto);
        drawGroup.add(jtbArista);
        //drawGroup.add(jtbAbrirPyA);
        drawGroup.add(jtbBorrarP);
        drawGroup.add(jtbBorrarA);
        drawGroup.add(jtbAleatorio);
        tGroup = new ButtonGroup();
        tGroup.add(jtbDelaunay);
        tGroup.add(jtbGreedy);
        tGroup.add(jtbIncremental);
        tGroup.add(jtbFan);
        tGroup.add(jtbDivide);
        
        ptGroup.add(jtbPTRandom);
        ptGroup.add(jtbPTHighest);
        ptGroup.add(jtbPTSmallest);
        
        tcc = new JColorChooser();
        tcc.getSelectionModel().addChangeListener(this);
        tcc.setBorder(BorderFactory.createTitledBorder("Choose Text Color"));

        /*properties = new Properties();//sacado 06/10 por inutilidad
        try {
            properties.load(this.getClass().getClassLoader().getResourceAsStream(propertyFileName));
            directorio = new String();
            directorio = (String) properties.get("dir");
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo leer: " + ex.getMessage(), "Leer archivo", JOptionPane.ERROR_MESSAGE);
        } catch (RuntimeException ex) {
            System.out.println("No se encontró el archivo con la dirección de los archivos de prueba" + ex.getMessage());
        } catch (IOException ex) {
            System.out.println("Error en IO" + ex.getMessage());
        }

        //jtbVoronoi.addActionListener(new BotonListener());
        //jPanel7.setVisible(false);
        /*ButtonGroup triangulacionGroup = new ButtonGroup();
        triangulacionGroup.add(jbtTDelaunay);
        triangulacionGroup.add(jbtTFan);
        triangulacionGroup.add(jbtTGreedy);
        triangulacionGroup.add(jbtTIncremental);
        triangulacionGroup.add(jbtTDivide);
        
        ButtonGroup pseudoTGroup = new ButtonGroup();
        pseudoTGroup.add(jbtPTAleatorio);
        pseudoTGroup.add(jbtPTGreedy);
        pseudoTGroup.add(jbtPTDistMax);*/

        /*ButtonGroup opcionesGroup = new ButtonGroup();
        opcionesGroup.add(jtbFlipar);
        opcionesGroup.add(jtbDilacion);*/

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        ptGroup = new javax.swing.ButtonGroup();
        pGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jtbPunto = new javax.swing.JToggleButton();
        jtbArista = new javax.swing.JToggleButton();
        jtbBorrarP = new javax.swing.JToggleButton();
        jtbBorrarA = new javax.swing.JToggleButton();
        jtbAleatorio = new javax.swing.JToggleButton();
        jbTRandom = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jtbDelaunay = new javax.swing.JToggleButton();
        jtbGreedy = new javax.swing.JToggleButton();
        jtbFan = new javax.swing.JToggleButton();
        jtbIncremental = new javax.swing.JToggleButton();
        jtbDivide = new javax.swing.JToggleButton();
        jtbVoronoi = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        jtbPTRandom = new javax.swing.JToggleButton();
        jtbPTSmallest = new javax.swing.JToggleButton();
        jtbPTHighest = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        checkPT = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        checkT = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        checkFD = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        checkNro = new javax.swing.JCheckBox();
        checkXY = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        checkGraph = new javax.swing.JCheckBox();
        checkPol = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jtbImagen = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton11 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jtbCH = new javax.swing.JToggleButton();
        jtbDilacion = new javax.swing.JToggleButton();
        jbtPT = new javax.swing.JButton();
        jtbFlipar = new javax.swing.JToggleButton();
        jbtPC = new javax.swing.JToggleButton();
        jtbTMA = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        jtbS1 = new javax.swing.JToggleButton();
        jtbS2 = new javax.swing.JToggleButton();
        jtbS3 = new javax.swing.JToggleButton();
        jtbS4 = new javax.swing.JToggleButton();
        jtbS5 = new javax.swing.JToggleButton();
        jtbS6 = new javax.swing.JToggleButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Draw"));
        jPanel1.setPreferredSize(new java.awt.Dimension(150, 65));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jtbPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/puntos.png"))); // NOI18N
        jtbPunto.setSelected(true);
        jtbPunto.setToolTipText("Add Point");
        jtbPunto.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbPunto.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbPunto.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbPuntoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jtbPunto, gridBagConstraints);

        jtbArista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/aristas.png"))); // NOI18N
        jtbArista.setToolTipText("Add Edge");
        jtbArista.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbArista.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbArista.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbArista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbAristaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jtbArista, gridBagConstraints);

        jtbBorrarP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/borrarP.png"))); // NOI18N
        jtbBorrarP.setToolTipText("Remove Point");
        jtbBorrarP.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbBorrarP.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbBorrarP.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbBorrarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbBorrarPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jtbBorrarP, gridBagConstraints);

        jtbBorrarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/borrarA.png"))); // NOI18N
        jtbBorrarA.setToolTipText("Remove Edge");
        jtbBorrarA.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbBorrarA.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbBorrarA.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbBorrarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbBorrarAActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jtbBorrarA, gridBagConstraints);

        jtbAleatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/aleatorio.png"))); // NOI18N
        jtbAleatorio.setToolTipText("Random Points");
        jtbAleatorio.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbAleatorio.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbAleatorio.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbAleatorioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jtbAleatorio, gridBagConstraints);

        jbTRandom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/TRandom.png"))); // NOI18N
        jbTRandom.setToolTipText("Random Triangulation");
        jbTRandom.setMaximumSize(new java.awt.Dimension(35, 25));
        jbTRandom.setMinimumSize(new java.awt.Dimension(35, 25));
        jbTRandom.setPreferredSize(new java.awt.Dimension(35, 25));
        jbTRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTRandomActionPerformed(evt);
            }
        });
        jPanel1.add(jbTRandom, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Triangulation"));
        jPanel2.setMinimumSize(new java.awt.Dimension(199, 65));
        jPanel2.setPreferredSize(new java.awt.Dimension(150, 65));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jtbDelaunay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/TDelaunay.png"))); // NOI18N
        jtbDelaunay.setToolTipText("Delaunay");
        jtbDelaunay.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbDelaunay.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbDelaunay.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbDelaunay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbDelaunayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jtbDelaunay, gridBagConstraints);

        jtbGreedy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/TGreedy.png"))); // NOI18N
        jtbGreedy.setToolTipText("Greedy");
        jtbGreedy.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbGreedy.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbGreedy.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbGreedy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbGreedyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jtbGreedy, gridBagConstraints);

        jtbFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/TFan.png"))); // NOI18N
        jtbFan.setToolTipText("Fan");
        jtbFan.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbFan.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbFan.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbFan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbFanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jtbFan, gridBagConstraints);

        jtbIncremental.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/TIncremental.png"))); // NOI18N
        jtbIncremental.setToolTipText("Incremental");
        jtbIncremental.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbIncremental.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbIncremental.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbIncremental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbIncrementalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jtbIncremental, gridBagConstraints);

        jtbDivide.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/TDivide.png"))); // NOI18N
        jtbDivide.setToolTipText("Divide and Conquest");
        jtbDivide.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbDivide.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbDivide.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbDivideActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jtbDivide, gridBagConstraints);

        jtbVoronoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/Voronoi.png"))); // NOI18N
        jtbVoronoi.setToolTipText("Voronoi Diagram");
        jtbVoronoi.setActionCommand("Voronoi diagram");
        jtbVoronoi.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jtbVoronoi.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbVoronoi.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbVoronoi.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbVoronoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbVoronoiActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jtbVoronoi, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("PseudoTriangulation"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        ptGroup.add(jtbPTRandom);
        jtbPTRandom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PTAleatorio.png"))); // NOI18N
        jtbPTRandom.setToolTipText("Random");
        jtbPTRandom.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbPTRandom.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbPTRandom.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbPTRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbPTRandomActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel3.add(jtbPTRandom, gridBagConstraints);

        ptGroup.add(jtbPTSmallest);
        jtbPTSmallest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PTGreedy.png"))); // NOI18N
        jtbPTSmallest.setToolTipText("Smallest Distance");
        jtbPTSmallest.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbPTSmallest.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbPTSmallest.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbPTSmallest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbPTSmallestActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel3.add(jtbPTSmallest, gridBagConstraints);

        ptGroup.add(jtbPTHighest);
        jtbPTHighest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PTMax.png"))); // NOI18N
        jtbPTHighest.setToolTipText("Highest Distance");
        jtbPTHighest.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbPTHighest.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbPTHighest.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbPTHighest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbPTHighestActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel3.add(jtbPTHighest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Show"));
        jPanel4.setPreferredSize(new java.awt.Dimension(280, 140));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setBackground(java.awt.Color.orange);
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setMaximumSize(new java.awt.Dimension(0, 0));
        jLabel1.setMinimumSize(new java.awt.Dimension(0, 0));
        jLabel1.setOpaque(true);
        jLabel1.setPreferredSize(new java.awt.Dimension(0, 0));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        jPanel4.add(jLabel1, gridBagConstraints);

        checkPT.setSelected(true);
        checkPT.setText("PTriangulation");
        checkPT.setEnabled(false);
        checkPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        jPanel4.add(checkPT, gridBagConstraints);

        jLabel2.setBackground(java.awt.Color.blue);
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setMaximumSize(new java.awt.Dimension(0, 0));
        jLabel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jLabel2.setOpaque(true);
        jLabel2.setPreferredSize(new java.awt.Dimension(0, 0));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        jPanel4.add(jLabel2, gridBagConstraints);

        checkT.setSelected(true);
        checkT.setText("Triangulation");
        checkT.setEnabled(false);
        checkT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        jPanel4.add(checkT, gridBagConstraints);

        jLabel3.setBackground(java.awt.Color.black);
        jLabel3.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        jPanel4.add(jLabel3, gridBagConstraints);

        checkFD.setSelected(true);
        checkFD.setText("FlipDelaunay");
        checkFD.setEnabled(false);
        checkFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel4.add(checkFD, gridBagConstraints);

        jLabel4.setBackground(java.awt.Color.lightGray);
        jLabel4.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        jPanel4.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Common Edge");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel4.add(jLabel5, gridBagConstraints);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/nro.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel9, gridBagConstraints);

        checkNro.setSelected(true);
        checkNro.setText("Point number");
        checkNro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkNroActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(checkNro, gridBagConstraints);

        checkXY.setText("Point coord");
        checkXY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkXYActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        jPanel4.add(checkXY, gridBagConstraints);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/xy.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        jPanel4.add(jLabel10, gridBagConstraints);

        jLabel6.setBackground(java.awt.Color.green);
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setMaximumSize(new java.awt.Dimension(0, 0));
        jLabel6.setMinimumSize(new java.awt.Dimension(0, 0));
        jLabel6.setOpaque(true);
        jLabel6.setPreferredSize(new java.awt.Dimension(0, 0));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        jPanel4.add(jLabel6, gridBagConstraints);

        jLabel7.setBackground(new java.awt.Color(179, 179, 0));
        jLabel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel7.setMaximumSize(new java.awt.Dimension(0, 0));
        jLabel7.setMinimumSize(new java.awt.Dimension(0, 0));
        jLabel7.setOpaque(true);
        jLabel7.setPreferredSize(new java.awt.Dimension(0, 0));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        jPanel4.add(jLabel7, gridBagConstraints);

        checkGraph.setSelected(true);
        checkGraph.setText("Graph");
        checkGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkGraphActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(checkGraph, gridBagConstraints);

        checkPol.setSelected(true);
        checkPol.setText("Poligonization");
        checkPol.setEnabled(false);
        checkPol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPolActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(checkPol, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jPanel4, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        jtbImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/imagen.png"))); // NOI18N
        jtbImagen.setToolTipText("Show Image");
        jtbImagen.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jtbImagen.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbImagen.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbImagen.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbImagen.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/imagen.png"))); // NOI18N
        jtbImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbImagenActionPerformed(evt);
            }
        });
        jPanel6.add(jtbImagen);

        jToggleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/imagenPunto.png"))); // NOI18N
        jToggleButton4.setToolTipText("Image points");
        jToggleButton4.setPreferredSize(new java.awt.Dimension(35, 25));
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        jPanel6.add(jToggleButton4);

        jToggleButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/pincel.png"))); // NOI18N
        jToggleButton11.setToolTipText("Paint triangles");
        jToggleButton11.setPreferredSize(new java.awt.Dimension(35, 25));
        jToggleButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton11ActionPerformed(evt);
            }
        });
        jPanel6.add(jToggleButton11);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/borrar.png"))); // NOI18N
        jButton1.setToolTipText("Clear");
        jButton1.setPreferredSize(new java.awt.Dimension(35, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jPanel6, gridBagConstraints);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Calculate"));

        jtbCH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/ch.png"))); // NOI18N
        jtbCH.setToolTipText("Convex Hull");
        jtbCH.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbCH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbCHActionPerformed(evt);
            }
        });
        jPanel8.add(jtbCH);

        jtbDilacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/dilacion.png"))); // NOI18N
        jtbDilacion.setToolTipText("Dilation");
        jtbDilacion.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jtbDilacion.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbDilacion.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbDilacion.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbDilacion.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/dilacion.png"))); // NOI18N
        jtbDilacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbDilacionActionPerformed(evt);
            }
        });
        jPanel8.add(jtbDilacion);

        jbtPT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PT.png"))); // NOI18N
        jbtPT.setToolTipText("is Pseudotriangulation?");
        jbtPT.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbtPT.setMaximumSize(new java.awt.Dimension(35, 25));
        jbtPT.setMinimumSize(new java.awt.Dimension(35, 25));
        jbtPT.setPreferredSize(new java.awt.Dimension(35, 25));
        jbtPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPTActionPerformed(evt);
            }
        });
        jPanel8.add(jbtPT);

        jtbFlipar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/Flipar.png"))); // NOI18N
        jtbFlipar.setToolTipText("Flip");
        jtbFlipar.setEnabled(false);
        jtbFlipar.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jtbFlipar.setMaximumSize(new java.awt.Dimension(35, 25));
        jtbFlipar.setMinimumSize(new java.awt.Dimension(35, 25));
        jtbFlipar.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbFlipar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/Flipar.png"))); // NOI18N
        jtbFlipar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbFliparActionPerformed(evt);
            }
        });
        jPanel8.add(jtbFlipar);

        jbtPC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PC.png"))); // NOI18N
        jbtPC.setToolTipText("Convex Polygon");
        jbtPC.setPreferredSize(new java.awt.Dimension(35, 25));
        jbtPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPCActionPerformed(evt);
            }
        });
        jPanel8.add(jbtPC);

        jtbTMA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/tma.png"))); // NOI18N
        jtbTMA.setToolTipText("Minimum Area Triangle");
        jtbTMA.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbTMA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbTMAActionPerformed(evt);
            }
        });
        jPanel8.add(jtbTMA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jPanel8, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Poligonization"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        pGroup.add(jtbS1);
        jtbS1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PS1.png"))); // NOI18N
        jtbS1.setToolTipText("RandomGreedyTriangle - GreedyPoint - GreedyEdge");
        jtbS1.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbS1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jtbS1, gridBagConstraints);

        pGroup.add(jtbS2);
        jtbS2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PS2.png"))); // NOI18N
        jtbS2.setToolTipText("RandomGreedyTriangle - RandomPoint - GreedyEdge");
        jtbS2.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbS2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbS2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jtbS2, gridBagConstraints);

        pGroup.add(jtbS3);
        jtbS3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PS3.png"))); // NOI18N
        jtbS3.setToolTipText("RandomGreedyTriangle - GreedyArea");
        jtbS3.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbS3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbS3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jtbS3, gridBagConstraints);

        pGroup.add(jtbS4);
        jtbS4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PS4.png"))); // NOI18N
        jtbS4.setToolTipText("RandomTriangle - GreedyPoint - GreedyEdge");
        jtbS4.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbS4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbS4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jtbS4, gridBagConstraints);

        pGroup.add(jtbS5);
        jtbS5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PS5.png"))); // NOI18N
        jtbS5.setToolTipText("RandomTriangle - RandomPoint - GreedyEdge");
        jtbS5.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbS5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbS5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jtbS5, gridBagConstraints);

        pGroup.add(jtbS6);
        jtbS6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador/PS6.png"))); // NOI18N
        jtbS6.setToolTipText("RandomTriangle - GreedyArea");
        jtbS6.setPreferredSize(new java.awt.Dimension(35, 25));
        jtbS6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbS6ActionPerformed(evt);
            }
        });
        jPanel5.add(jtbS6, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jPanel5, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jtbAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbAleatorioActionPerformed
        // TODO add your handling code here:
        aleatorio();
    }//GEN-LAST:event_jtbAleatorioActionPerformed

    private void jtbPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbPuntoActionPerformed
        // TODO add your handling code here:
        agregarPunto();
    }//GEN-LAST:event_jtbPuntoActionPerformed

    private void jtbAristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbAristaActionPerformed
        // TODO add your handling code here:
        agregarArista();
    }//GEN-LAST:event_jtbAristaActionPerformed

    private void jtbBorrarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbBorrarPActionPerformed
        // TODO add your handling code here:
        borrarPunto();
    }//GEN-LAST:event_jtbBorrarPActionPerformed

    private void jtbBorrarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbBorrarAActionPerformed
        // TODO add your handling code here:
        borrarArista();
    }//GEN-LAST:event_jtbBorrarAActionPerformed

    private void jtbFliparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbFliparActionPerformed
        // TODO add your handling code here:
        if (jToggleButton11.isSelected()){
            FV.panel.setPintar(false);
            jToggleButton11.setSelected(false);
        }
        flipar(jtbFlipar.isSelected());
    }//GEN-LAST:event_jtbFliparActionPerformed

    void flipar(boolean selected){
        if (jtbFlipar.isEnabled()){
            FV.panel.setFlipar(selected);
            FV.setFlipar(selected);
            jtbFlipar.setSelected(selected);
            if (selected) {
                jtbDilacion.setEnabled(false);
                checkFD.setEnabled(true);
            } else {
                jtbDilacion.setEnabled(true);
                checkFD.setEnabled(false);
            }
        } else {
            FV.setFlipar(false);
        }
    }
    private void jtbDilacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbDilacionActionPerformed
        // TODO add your handling code here:
        setDilacion(jtbDilacion.isSelected());
    }//GEN-LAST:event_jtbDilacionActionPerformed

    private void jtbImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbImagenActionPerformed
        // TODO add your handling code here:
        setShowImage(jtbImagen.isSelected());
    }//GEN-LAST:event_jtbImagenActionPerformed

    private void jbtPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPTActionPerformed
        // TODO add your handling code here:
        FV.panel.esPTr();
    }//GEN-LAST:event_jbtPTActionPerformed

    private void checkPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPTActionPerformed
        // TODO add your handling code here:
        if (checkPT.isSelected()) {
            FV.panel.mostrar(1);//FV.panel.setPseudoT(pt);
            pt = 1;
            habilitarDilacionFlipar();
        } else {
            FV.panel.mostrar(-1);//FV.panel.setPseudoT(0);
            pt = 0;
            habilitarDilacionFlipar();
        }
    }//GEN-LAST:event_checkPTActionPerformed

    private void checkTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTActionPerformed
        // TODO add your handling code here:
        if (checkT.isSelected()) {
            FV.panel.mostrar(2);//FV.panel.setDibujar(tr);
            tr = 1;
            habilitarDilacionFlipar();
        } else {
            FV.panel.mostrar(-2);//FV.panel.setDibujar(0);
            tr = 0;
            habilitarDilacionFlipar();
        }
    }//GEN-LAST:event_checkTActionPerformed

    private void checkFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFDActionPerformed
        // TODO add your handling code here:
        FV.panel.settDelaunayActivo(checkFD.isSelected());
    }//GEN-LAST:event_checkFDActionPerformed

private void jbtPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPCActionPerformed
// TODO add your handling code here:
    polConvexo();
}//GEN-LAST:event_jbtPCActionPerformed

    private void checkNroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkNroActionPerformed
        FV.panel.setNro(checkNro.isSelected());
    }//GEN-LAST:event_checkNroActionPerformed

    private void jtbDelaunayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbDelaunayActionPerformed
        // TODO add your handling code here:
        comprobarTriangulacion(0);
        //delaunay();
    }//GEN-LAST:event_jtbDelaunayActionPerformed

    private void jtbGreedyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbGreedyActionPerformed
        // TODO add your handling code here:
        comprobarTriangulacion(1);
        //greedy();
    }//GEN-LAST:event_jtbGreedyActionPerformed

    private void jtbFanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbFanActionPerformed
        // TODO add your handling code here:
        comprobarTriangulacion(2);
        //fan();
    }//GEN-LAST:event_jtbFanActionPerformed

    private void jtbIncrementalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbIncrementalActionPerformed
        // TODO add your handling code here:
        comprobarTriangulacion(3);
        //incremental();
    }//GEN-LAST:event_jtbIncrementalActionPerformed

    private void jtbDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbDivideActionPerformed
        // TODO add your handling code here:
        comprobarTriangulacion(4);
        //divide();
    }//GEN-LAST:event_jtbDivideActionPerformed

    private void jtbPTRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbPTRandomActionPerformed
        // TODO add your handling code here:
        ptAleatorio();
    }//GEN-LAST:event_jtbPTRandomActionPerformed

    private void jtbPTSmallestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbPTSmallestActionPerformed
        // TODO add your handling code here:
        ptGreedy();
    }//GEN-LAST:event_jtbPTSmallestActionPerformed

    private void jtbPTHighestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbPTHighestActionPerformed
        // TODO add your handling code here:
        ptDistMax();
    }//GEN-LAST:event_jtbPTHighestActionPerformed

    private void jtbCHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbCHActionPerformed
        // TODO add your handling code here:
        FV.panel.cH(jtbCH.isSelected());
    }//GEN-LAST:event_jtbCHActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        // TODO add your handling code here:
        FV.panel.setImagenPunto(jToggleButton4.isSelected());
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void checkXYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkXYActionPerformed
        // TODO add your handling code here:
        setXY(checkXY.isSelected());
    }//GEN-LAST:event_checkXYActionPerformed

    private void jtbS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbS1ActionPerformed
        // TODO add your handling code here:
        polSimple(MINAREA, GREEDY, GREEDY, 1);
    }//GEN-LAST:event_jtbS1ActionPerformed

    private void jtbS2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbS2ActionPerformed
        // TODO add your handling code here:
        polSimple(MINAREA, RANDOM, GREEDY, 2);
    }//GEN-LAST:event_jtbS2ActionPerformed

    private void jtbS3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbS3ActionPerformed
        // TODO add your handling code here:
        polSimple(MINAREA, MINAREA, MINAREA, 3);
    }//GEN-LAST:event_jtbS3ActionPerformed

    private void jtbS4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbS4ActionPerformed
        // TODO add your handling code here:
        polSimple(RANDOM, GREEDY, GREEDY, 4);
    }//GEN-LAST:event_jtbS4ActionPerformed

    private void jtbS5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbS5ActionPerformed
        // TODO add your handling code here:
        polSimple(RANDOM, RANDOM, GREEDY, 5);
    }//GEN-LAST:event_jtbS5ActionPerformed

    private void jtbS6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbS6ActionPerformed
        // TODO add your handling code here:
        polSimple(RANDOM, MINAREA, MINAREA, 6);
    }//GEN-LAST:event_jtbS6ActionPerformed

    private void jToggleButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton11ActionPerformed
        // TODO add your handling code here:
        pintar(jToggleButton11.isSelected());
    }//GEN-LAST:event_jToggleButton11ActionPerformed
    public void pintar(boolean b){
        jToggleButton11.setSelected(b);
        FV.setPintar(b);
        if (b && (tr > 0) && (checkT.isSelected())) {
            if (jf == null){
                jf = new JFrame();
                jf.add(tcc);
                tcc.setVisible(true);
                jf.setSize(new Dimension(450, 400));
                jf.setAlwaysOnTop(true);
                jf.setResizable(false);
                jf.setVisible(true);
                jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                jf.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(WindowEvent e) {
                        jf = null;
                    }
                });
                //Color color = JColorChooser.showDialog(this, "Selecciona el color", Color.yellow);

                //FV.panel.setColor(color);
                drawGroup.clearSelection();
                drawBoton = -1;
                FV.panel.setAgregar(2);
                FV.panel.setPintar(true);
            }
        } else {
            if (b){
                JOptionPane.showMessageDialog(null, "Only can be painted cofigurations of area triangulations", "Paint", JOptionPane.ERROR_MESSAGE);
            }
            if (jf != null){
                jf.dispatchEvent(new WindowEvent(jf, WindowEvent.WINDOW_CLOSING));
            }
            jToggleButton11.setSelected(false);
            FV.panel.setPintar(false);
        }
    }
    
    private void jtbTMAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbTMAActionPerformed
        // TODO add your handling code here:
        FV.panel.setTma(jtbTMA.isSelected());
    }//GEN-LAST:event_jtbTMAActionPerformed

    private void jtbVoronoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbVoronoiActionPerformed
        // TODO add your handling code here:
        setVoronoi(jtbVoronoi.isSelected());
    }//GEN-LAST:event_jtbVoronoiActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        FV.borrar();
        //((FV)(getRootPane().getParent())).reiniciar();
        //initComponents();
        reiniciar();
        repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        final JFrameColores jfc = new JFrameColores();
        jfc.getJColorChosser1().addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                FV.panel.changeColor("m", jfc.getJColorChosser1().getSelectedColor());
                jLabel6.setBackground(jfc.getJColorChosser1().getSelectedColor());
            }
        });
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        final JFrameColores jfc = new JFrameColores();
        jfc.getJColorChosser1().addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                FV.panel.changeColor("t", jfc.getJColorChosser1().getSelectedColor());
                jLabel2.setBackground(jfc.getJColorChosser1().getSelectedColor());
            }
        });
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        final JFrameColores jfc = new JFrameColores();
        jfc.getJColorChosser1().addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                FV.panel.changeColor("pt", jfc.getJColorChosser1().getSelectedColor());
                jLabel1.setBackground(jfc.getJColorChosser1().getSelectedColor());
            }
        });
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        final JFrameColores jfc = new JFrameColores();
        jfc.getJColorChosser1().addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                FV.panel.changeColor("p", jfc.getJColorChosser1().getSelectedColor());
                jLabel7.setBackground(jfc.getJColorChosser1().getSelectedColor());
            }
        });
    }//GEN-LAST:event_jLabel7MouseClicked

    private void checkGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkGraphActionPerformed
        // TODO add your handling code here:
        FV.panel.setMostrarGraph(checkGraph.isSelected());
    }//GEN-LAST:event_checkGraphActionPerformed

    private void checkPolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPolActionPerformed
        // TODO add your handling code here:
        FV.panel.setVerP(checkPol.isSelected());
    }//GEN-LAST:event_checkPolActionPerformed

    private void jbTRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTRandomActionPerformed
        if (FV.panel.getL().size() > 2){
            FV.panel.triangulacionAleatoria();
        } else {
            JOptionPane.showMessageDialog(null, "Must have at least 3 points", "Triangulation", JOptionPane.ERROR_MESSAGE);
        }
    }                                        
        // TODO add your handling code here:         FV.panel.triangulacionAleatoria();     }//GEN-LAST:event_jbTRandomActionPerformed

    public void habilitarImagen(boolean b) {
        jtbImagen.setSelected(b);
    }
    
    public void habilitarImagenPunto(boolean b){
        jToggleButton4.setSelected(b);
    }
    
    public void habilitarPintar(boolean b){
        jToggleButton11.setSelected(b);
    }

    public void reiniciar() {
        habilitarImagen(false);
        tr = 0;
        pt = 0;
        p = 0;
        llamarCaja = ' ';
        
        //draw
        drawBoton = 0;
        drawGroup.clearSelection();
        jtbPunto.setSelected(true);
        jbTRandom.setSelected(false);
        //fin draw
        
        //calculate
        jtbCH.setSelected(false);
        jtbDilacion.setSelected(false);
        jtbDilacion.setEnabled(true);
        jbtPT.setEnabled(true);
        jtbFlipar.setEnabled(false);
        jtbFlipar.setSelected(false);
        jbtPC.setEnabled(true);
        jbtPC.setSelected(false);
        jtbTMA.setSelected(false);
        jtbTMA.setEnabled(true);
        //fin calculate
        
        //triangulation
        /*jtbDelaunay.setSelected(false);
        jtbGreedy.setSelected(false);
        jtbFan.setSelected(false);
        jtbDivide.setSelected(false);
        jtbIncremental.setSelected(false);*/
        tGroup.clearSelection();
        jtbVoronoi.setSelected(false);
        //fin triangulation
        
        //pseudo
        /*jtbPTRandom.setSelected(false);
        jtbPTSmallest.setSelected(false);
        jtbPTHighest.setSelected(false);*/
        ptGroup.clearSelection();
        //fin pseudo
        
        pGroup.clearSelection();
        
        checkGraph.setSelected(true);
        checkT.setSelected(true);
        checkT.setEnabled(false);
        checkPT.setSelected(true);
        checkPT.setEnabled(false);
        checkPol.setSelected(true);
        checkPol.setEnabled(false);
        
        checkFD.setSelected(true);
        checkFD.setEnabled(false);
        checkNro.setSelected(true);
        checkXY.setSelected(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkFD;
    private javax.swing.JCheckBox checkGraph;
    private javax.swing.JCheckBox checkNro;
    private javax.swing.JCheckBox checkPT;
    private javax.swing.JCheckBox checkPol;
    private javax.swing.JCheckBox checkT;
    private javax.swing.JCheckBox checkXY;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JToggleButton jToggleButton11;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JButton jbTRandom;
    private javax.swing.JToggleButton jbtPC;
    private javax.swing.JButton jbtPT;
    private javax.swing.JToggleButton jtbAleatorio;
    private javax.swing.JToggleButton jtbArista;
    private javax.swing.JToggleButton jtbBorrarA;
    private javax.swing.JToggleButton jtbBorrarP;
    private javax.swing.JToggleButton jtbCH;
    private javax.swing.JToggleButton jtbDelaunay;
    private javax.swing.JToggleButton jtbDilacion;
    private javax.swing.JToggleButton jtbDivide;
    private javax.swing.JToggleButton jtbFan;
    private javax.swing.JToggleButton jtbFlipar;
    private javax.swing.JToggleButton jtbGreedy;
    private javax.swing.JToggleButton jtbImagen;
    private javax.swing.JToggleButton jtbIncremental;
    private javax.swing.JToggleButton jtbPTHighest;
    private javax.swing.JToggleButton jtbPTRandom;
    private javax.swing.JToggleButton jtbPTSmallest;
    private javax.swing.JToggleButton jtbPunto;
    private javax.swing.JToggleButton jtbS1;
    private javax.swing.JToggleButton jtbS2;
    private javax.swing.JToggleButton jtbS3;
    private javax.swing.JToggleButton jtbS4;
    private javax.swing.JToggleButton jtbS5;
    private javax.swing.JToggleButton jtbS6;
    private javax.swing.JToggleButton jtbTMA;
    private javax.swing.JToggleButton jtbVoronoi;
    private javax.swing.ButtonGroup pGroup;
    private javax.swing.ButtonGroup ptGroup;
    // End of variables declaration//GEN-END:variables

    private void habilitarDilacionFlipar() {
        if (pt == 0 && tr != 0) {
            jtbFlipar.setEnabled(true);
            FV.setHabilitarFlipar(true);
        } else {
            jtbFlipar.setEnabled(false);
            jtbFlipar.setSelected(false);
            FV.panel.setFlipar(false);
            FV.setHabilitarFlipar(false);
            //FV.setFlipar(true);
        }

        /*if (pt != 0 ^ tr != 0) {
            jtbDilacion.setEnabled(true);
        } else {
            jtbDilacion.setEnabled(false);
            jtbDilacion.setSelected(false);
            FV.panel.setDilacion(0);
        }*/

    }

    void triangular(int tipo) {
        switch (tipo) {//por si llaman desde el menú
            case 1:
                jtbDelaunay.setSelected(true);
                delaunay();
                break;
            case 2:
                jtbDivide.setSelected(true);
                divide();
                break;
            case 3:
                jtbFan.setSelected(true);
                fan();
                break;
            case 4:
                jtbIncremental.setSelected(true);
                incremental();
                break;
            case 5:
                jtbGreedy.setSelected(true);
                greedy();
                break;
        }

        habilitarDilacionFlipar();
        checkT.setEnabled(true);
        deshabilitarBotonesEdicion();
        FV.setTriangulationSelected(tr);//para el menu
    }

    void pseudoTriangular(int tipo) {
        switch (tipo) {//por si llaman desde el menú
            case 1:
                jtbPTRandom.setSelected(true);
                ptAleatorio();
                break;
            case 2:
                jtbPTSmallest.setSelected(true);
                ptGreedy();
                break;
            case 3:
                jtbPTHighest.setSelected(true);
                ptDistMax();
                break;
        }
        habilitarDilacionFlipar();
        checkPT.setEnabled(true);
        deshabilitarBotonesEdicion();
        FV.setPseudoTriangulationSelected(pt);
    }

    public void agregarPunto() {
        /*Dia del investigador*/
        //FV.panel.setPintar(false);
        pintar(false);
        /*Dia del investigador*/
        if (drawBoton != 0) {
            jtbPunto.setSelected(true);
            if (tr > 0) {
                FV.panel.setDibujar(tr);
            } else {
                FV.panel.setDibujar(0);
            }
            if (pt > 0) {
                FV.panel.setPseudoT(pt);
            } else {
                FV.panel.setPseudoT(0);
            }
            FV.panel.setAgregar(0);
            drawBoton = 0;
        } else {
            FV.panel.setDibujar(tr);
            FV.panel.setPseudoT(pt);
            FV.panel.setAgregar(-1);
            drawGroup.clearSelection();
            drawBoton = -1;
        }
    }

    public void agregarArista() {
        if (drawBoton != 1) {
            jtbArista.setSelected(true);
            //FV.panel.setDibujar(0);
            FV.panel.setAgregar(1);
            drawBoton = 1;
        } else {
            //FV.panel.setDibujar(0);
            FV.panel.setAgregar(-1);
            drawGroup.clearSelection();
            drawBoton = -1;
        }
    }

    public void borrarPunto() {
        if (drawBoton != 3) {
            jtbBorrarP.setSelected(true);
            FV.panel.setBorrar(0);
            drawBoton = 3;
        } else {
            FV.panel.setBorrar(-1);
            drawGroup.clearSelection();
            drawBoton = -1;
        }
    }

    public void borrarArista() {
        if (drawBoton != 4) {
            jtbBorrarA.setSelected(true);
            FV.panel.setBorrar(1);
            drawBoton = 4;
        } else {
            FV.panel.setBorrar(-1);
            drawGroup.clearSelection();
            drawBoton = -1;
        }
    }

    public void abrirPuntos() {
        JFileChooser archivoPuntos;
        //JFileChooser archivoAristas;
//        if (drawBoton != 2) {
//            jtbAbrirPyA.setSelected(true);
        archivoPuntos = new JFileChooser(FV.getDirectorio());
        archivoPuntos.setDialogTitle("Load points");
        //FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto (.txt)", "txt");
        //archivo.addChoosableFileFilter(filtro);
        if (archivoPuntos.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            FV.setDirectorio(archivoPuntos.getSelectedFile().getParent());
            FV.panel.leerPuntos(archivoPuntos.getSelectedFile().getAbsolutePath());
            drawGroup.clearSelection();
            FV.panel.setAgregar(-1);
            /*FileOutputStream out = null;
            URL url = this.getClass().getClassLoader().getResource(propertyFileName);
            try {
            out = new FileOutputStream(url.getPath());
            properties.put("dir", archivoPuntos.getSelectedFile().getParent());
            properties.store(out, null);
            directorio = properties.getProperty("dir");
            } catch (IOException ex) {
            System.out.print("No se encuentra el archivo para guardar la dirección de los datos" + ex.getMessage());
            } catch (NullPointerException ex) {
            System.out.print("No se encuentra el archivo para guardar la dirección de los datos" + ex.getMessage());
            } finally {
            FV.panel.leerPuntos(archivoPuntos.getSelectedFile().getAbsolutePath());
            drawGroup.clearSelection();
            FV.panel.setAgregar(-1);
            }*/
        } else {
            jtbPunto.setSelected(true);
        }
        //habilitarT(true);
//        } else {
//            
//            drawBoton = -1;
//        }
    }

    public void abrirAristas() {
        JFileChooser archivoAristas = new JFileChooser(FV.getDirectorio());
        archivoAristas.setDialogTitle("Load edges");
        if (archivoAristas.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            FV.setDirectorio(archivoAristas.getSelectedFile().getParent());
            FV.panel.leerAristas(archivoAristas.getSelectedFile().getAbsolutePath());
            /*FileOutputStream out = null;
            URL url = this.getClass().getClassLoader().getResource(propertyFileName);
            try {
            out = new FileOutputStream(url.getPath());
            properties.put("dir", archivoAristas.getSelectedFile().getParent());
            properties.store(out, null);
            directorio = properties.getProperty("dir");
            } catch (IOException ex) {
            System.out.print("No se encuentra el archivo para guardar la dirección de los datos" + ex.getMessage());
            } catch (NullPointerException ex) {
            System.out.print("No se encuentra el archivo para guardar la dirección de los datos" + ex.getMessage());
            } finally {
            FV.panel.leerAristas(archivoAristas.getSelectedFile().getAbsolutePath());
            }
            try {
            if (out != null) {
            out.flush();
            out.close();
            }
            } catch (IOException ex) {
            System.out.print("No se encuentra el archivo para guardar la dirección de los datos" + ex.getMessage());
            }*/
        }
    }

    public void aleatorio() {
        if (drawBoton != 5) {
            jtbAleatorio.setSelected(true);
            llamarCaja = 'a';
            CajadePuntos caja = new CajadePuntos(llamarCaja);
            caja.setVisible(true);
            caja.addWindowListener(this);

            /*new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            JOptionPane.showMessageDialog(null, "La triangulación debe ser Delaunay", "Pintar", JOptionPane.ERROR_MESSAGE);
            }
            });*/
            drawBoton = 5;
            FV.panel.setDibujar(tr);
            FV.panel.setPseudoT(pt);
            FV.panel.setAgregar(-1);
            FV.panel.setBorrar(-1);
        } else {
            drawGroup.clearSelection();
            drawBoton = -1;
        }
        //if (caja.getCant() > 0)
        //  FV.panel.GenerarAle(caja.getCant());
    }

    public void delaunay() {
        FV.panel.setDibujar(1);
        tr = 1;
        triangular(0);
    }

    public void fan() {
        FV.panel.setDibujar(3);
        tr = 3;
        triangular(0);
    }

    public void greedy() {
        FV.panel.setDibujar(5);
        tr = 5;
        triangular(0);
    }

    public void incremental() {
        llamarCaja = 'i';
        CajadePuntos caja = new CajadePuntos(llamarCaja);
        caja.setVisible(true);
        caja.addWindowListener(this);
        /*FV.panel.setGrado(25);
        FV.panel.setDibujar(4);
        tr = 4;
        triangular();*/
    }

    public void divide() {
        FV.panel.setDibujar(2);
        tr = 2;
        triangular(0);
    }

    public void ptAleatorio() {
        FV.panel.setPseudoT(1);
        pt = 1;
        pseudoTriangular(0);
    }

    public void polSimple(int op1, int op2, int op3, int tipo) {
        if (p == tipo) {
            FV.panel.setPoligonizarSimple(false, POLSIMPLE, null);
            pGroup.clearSelection();
            p = 0;
            checkPol.setEnabled(false);
        } else {
            switch (tipo) {//por si llaman desde el menú
                case 1:
                    jtbS1.setSelected(true);
                    break;
                case 2:
                    jtbS2.setSelected(true);
                    break;
                case 3:
                    jtbS3.setSelected(true);
                    break;
                case 4:
                    jtbS4.setSelected(true);
                    break;
                case 5:
                    jtbS5.setSelected(true);
                    break;
                case 6:
                    jtbS6.setSelected(true);
                    break;
            }
            FV.setPoligonizationSelected(tipo);
            int[] opciones = new int[3];
            opciones[0] = op1;
            opciones[1] = op2;
            opciones[2] = op3;
            deshabilitarBotonesEdicion();
            p = tipo;
            FV.panel.setPoligonizarSimple(true, POLSIMPLE, opciones);
            habilitarDilacionFlipar();
            checkPol.setEnabled(true);
        }
    }

    public void polConvexo() {
        if (jbtPC.isSelected()) {
            llamarCaja = 'p';
            CajadePuntos caja = new CajadePuntos(llamarCaja);
            caja.setVisible(true);
            caja.addWindowListener(this);
        } else {
            FV.panel.setPoligonizarConvexo(false, 0, null);
        }
    }

    public void ptGreedy() {
        FV.panel.setPseudoT(2);
        pt = 2;
        pseudoTriangular(0);
    }

    public void ptDistMax() {
        FV.panel.setPseudoT(3);
        pt = 3;
        pseudoTriangular(0);
    }

    public void windowOpened(WindowEvent e) {
    }

    public void windowClosing(WindowEvent e) {
        if (((CajadePuntos) e.getSource()).getLlamada() == 'a') {
            FV.panel.GenerarAle(((CajadePuntos) e.getSource()).getCant());
        } else if (((CajadePuntos) e.getSource()).getLlamada() == 'p') {
            int[] opciones = new int[1];//
            opciones[0] = ((CajadePuntos) e.getSource()).getCant();
            FV.panel.setPoligonizarConvexo(true, jbtPC.isSelected() ? 2 : 0, opciones);
        } else if (((CajadePuntos) e.getSource()).getLlamada() == 'i') {
            int grado = ((CajadePuntos) e.getSource()).getCant();
            if (grado >= 0) {
                FV.panel.setGrado(grado);
                FV.panel.setDibujar(4);
                tr = 4;
                triangular(0);
            } else {
                tGroup.clearSelection();
            }
        }
    }

    public void windowClosed(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowActivated(WindowEvent e) {
    }

    public void windowDeactivated(WindowEvent e) {
    }

    public void stateChanged(ChangeEvent e) {
        Color color = tcc.getColor();
        FV.panel.setColor(color);
    }

    private void deshabilitarBotonesEdicion() {
        //jbtPT.setEnabled(false);
        /*jtbArista.setEnabled(false);
        jtbBorrarA.setEnabled(false);*/
        //jbtPC.setEnabled(false);
        drawGroup.clearSelection();
        drawBoton = -1;
        FV.panel.setAgregar(2);
        FV.panel.setBorrar(2);
    }

    void setDilacion(boolean selected) {
        if (jtbDilacion.isEnabled()){
            jtbDilacion.setSelected(selected);
            FV.setDilacion(selected);
            if (jtbDilacion.isSelected()) {
                if ((tr > 0) && (checkT.isSelected())) {
                    FV.panel.setDilacion(2);
                } else if ((pt > 0) && (checkPT.isSelected())){
                    FV.panel.setDilacion(1);
                } else if ((tr <= 0) && (pt <= 0) &&(checkGraph.isSelected())) {
                    FV.panel.setDilacion(3);
                }
            } else { 
                FV.panel.setDilacion(0);
            }
        }
    }

    void setVoronoi(boolean selected) {
        FV.panel.setVoronoi(selected);
        jtbVoronoi.setSelected(selected);
        FV.setVoronoi(selected);
    }

    void setXY(boolean selected) {
        FV.panel.setXY(selected);
        checkXY.setSelected(selected);
        FV.setXY(selected);
    }

    void setShowImage(boolean selected) {
        FV.panel.setImagenFondo(selected);
        jtbImagen.setSelected(selected);
        FV.setShowImage(selected);
    }

    private void comprobarTriangulacion(int i) {
        if (jToggleButton11.isSelected()){
            FV.panel.setPintar(false);
            jToggleButton11.setSelected(false);
        }
        switch (i){
            case 0: delaunay(); break;
            case 1: greedy(); break;
            case 2: fan(); break;
            case 3: incremental(); break;
            case 4: divide();
        }
            
    }
}
